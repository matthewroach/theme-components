/* stylelint-disable max-nesting-depth, no-invalid-position-at-import-rule */
@use 'sass:map';
@use 'sass:list';

@use './global/reset';
@use './global/a11y';

$component-prefix: '--c';
$block-prefix: '--b';

$breakpoints: () !default;
$global: () !default;
$alias: () !default;
$tokens: () !default;


//
// Used to set the nest components CSS Variable overrides at the block level
// When a block has components nested within, and those components has
// different styles to the default component styles they are overridden
// use CSS Variables
//
// $component-prefix-date-font-weight: 900
//
@mixin block-components($blockName) {
	@if list.length(map.get($tokens, 'default', 'blocks', $blockName, 'components')) == 0 {
		@warn 'Block "#{$blockName}" has components map with no values';
	}
	@each $name, $value in map.get($tokens, 'default', 'blocks', $blockName, 'components') {
		@if list.length($value) == 0 {
			@warn 'Block "#{$blockName}" has component "#{$name}" with no values';
		}
		@if type-of($value) == map {
			@each $a, $b in $value {
				#{$component-prefix}-#{$name}-#{$a}: #{$b};
			}
		}
	}
}

//
// Ouput all the blocks properties in the format
// CSSProperty: CSSVariable
// background-color: var($block-prefix-list-background-color);
//
@mixin block-properties($blockName, $others...) {
	@if map.has-key($tokens, 'default', 'blocks', $blockName, $others...) == false {
		@warn 'Properties for block "#{$blockName}" not found.';
	} @else {
		@each $name, $value in map.get($tokens, 'default', 'blocks', $blockName, $others...) {
			@if type-of($value) != map {
				#{$name}: block-var($blockName, $name);
			}
		}
	}
}

//
// Output all the component values in format
// CSSProperty: CSSVariable
// background-color: var($component-prefix-overline-background-color);
//
@mixin component-properties($component) {
	@if map.has-key($tokens, 'default', 'components', $component) == false {
		@warn 'Properties for component "#{$component}" not found.';
	} @else {
		@each $name, $value in map.get($tokens, 'default', 'components', $component) {
			#{$name}: component-var($component, $name);
		}
	}
}

//
// Return the CSS Variable for a component item
//
@function component-var($component, $item) {
	@return var(#{$component-prefix}-#{$component}-#{$item});
}

//
// Return the CSS Variable for a block item
//
@function block-var($block, $item) {
	@return var(#{$block-prefix}-#{$block}-#{$item});
}


//
// Getter function to return breakpoints map that was set by the theme
//
@function get-breakpoints() {
	@return $breakpoints;
}



//
// Start output
//
:root {
	// Global Tokens
	@each $name, $value in $global {
		--global-#{$name}: #{$value};
	}

	// Global Alias Tokens
	@each $name, $value in $alias {
		--#{$name}: #{$value};
	}
}

@each $breakpoint, $breakpointValue in $breakpoints {
	@media only screen and ($breakpointValue) {
		:root {
			// Alias Tokens
			@each $name, $value in map.get($tokens, $breakpoint, 'alias') {
				--#{$name}: #{$value};
			}


			// Component Tokens
			@each $componentName, $componentItem in map.get($tokens, $breakpoint, 'components') {
				@if list.length($componentItem) == 0 {
					@warn 'Component "#{$componentName}" is configured with no options';
				} @else {
					@if type-of($componentItem) == map {
						@each $componentProperty, $componentValue in $componentItem {
							@if type-of($componentValue) != map {
								#{$component-prefix}-#{$componentName}-#{$componentProperty}: #{$componentValue};
							}
						}
					}
				}
			}

			// Block Tokens
			@each $blockName, $blockItem in map.get($tokens, $breakpoint, 'blocks') {
				@if list.length($blockItem) == 0 {
					@warn 'Block "#{$blockName}" is configured with no options';
				} @else {
					@if type-of($blockItem) == map {
						@each $bProperty, $bValue in $blockItem {
							@if type-of($bValue) != map {
								#{$block-prefix}-#{$blockName}-#{$bProperty}: #{$bValue};
							}
						}
					}
				}
			}
		}
	}
}
// stylelint-enable max-nesting-depth


body {
	@include component-properties('body');
}
